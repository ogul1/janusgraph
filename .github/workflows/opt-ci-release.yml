# Copyright 2020 JanusGraph Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Modified CI Release
env:
  ES_JAVA_OPTS: -Xms256m -Xmx512m
  BUILD_MAVEN_OPTS: -DskipTests=true --batch-mode --also-make
  VERIFY_MAVEN_OPTS: -Pcoverage
jobs:
  build-all:
    runs-on: ubuntu-22.04
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-build-all.csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/janusgraph/janusgraph', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - uses: actions/checkout@v4
    - run: touch optcd-3.txt
    - uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |-
          ${{ runner.os }}-maven-
    - run: touch optcd-4.txt
    - uses: actions/setup-java@v4
      with:
        java-version: 8.0.382+5
        distribution: zulu
    - run: touch optcd-5.txt
    - run: mvn clean install --projects janusgraph-all -Pjanusgraph-cache -Dmaven.javadoc.skip=true
        ${{ env.BUILD_MAVEN_OPTS }}
    - run: touch optcd-6.txt
    - run: mvn verify --projects janusgraph-all -Pjanusgraph-cache ${{ env.VERIFY_MAVEN_OPTS
        }}
    - run: touch optcd-7.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-build-all
        path: /home/runner/inotifywait-log-build-all.csv
    name: build-all
  dist-tests:
    runs-on: ubuntu-22.04
    needs: build-all
    strategy:
      fail-fast: false
      matrix:
        include:
        - args: ''
          java: 8
          tag_suffix: ''
        - args: -Pjava-11
          java: 11
          tag_suffix: -java-11
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-dist-tests ().csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/janusgraph/janusgraph', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - uses: actions/checkout@v4
    - run: touch optcd-3.txt
    - uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |-
          ${{ runner.os }}-maven-
    - run: touch optcd-4.txt
    - uses: actions/setup-java@v4
      with:
        java-version: 8.0.382+5
        distribution: zulu
    - run: touch optcd-5.txt
    - uses: actions/setup-java@v4
      with:
        java-version: 11.0.20+1
        distribution: zulu
    - run: touch optcd-6.txt
    - run: sudo apt-get update && sudo apt-get install -y expect
    - run: touch optcd-7.txt
    - run: mvn clean install -Pjanusgraph-release ${{ env.BUILD_MAVEN_OPTS }} -Dgpg.skip=true
        ${{ matrix.args }}
    - run: touch optcd-8.txt
    - run: mvn verify -pl janusgraph-dist -Pjanusgraph-release -Dgpg.skip=true ${{
        matrix.args }}
    - run: touch optcd-9.txt
    - uses: actions/upload-artifact@v4
      with:
        name: distribution-build-full-java-${{ matrix.java }}
        path: janusgraph-dist/target/janusgraph-full-*.zip
    - run: touch optcd-10.txt
    - uses: actions/upload-artifact@v4
      with:
        name: distribution-build-core-java-${{ matrix.java }}
        path: janusgraph-dist/target/janusgraph-[!full]*.zip
    - run: touch optcd-11.txt
    - name: Set JanusGraph version environment variable
      run: |-
        export JG_VER="$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)-$(git rev-parse --short HEAD)"
        echo "JG_VER=${JG_VER}" >> $GITHUB_ENV
    - run: touch optcd-12.txt
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: ghcr.io/janusgraph/janusgraph:${{ env.JG_VER }}${{ matrix.tag_suffix
          }}
        format: sarif
        output: trivy-results.sarif
    - run: touch optcd-13.txt
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif
    - run: touch optcd-14.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-dist-tests ()
        path: /home/runner/inotifywait-log-dist-tests ().csv
    name: dist-tests ()
  tp-tests:
    runs-on: ubuntu-22.04
    needs: build-all
    strategy:
      fail-fast: false
      matrix:
        include:
        - module: inmemory
          args: -Dtest.skip.tp=false -DskipTests=true
          java: 8
        - module: berkeleyje
          args: -Dtest.skip.tp=false -DskipTests=true
          java: 8
        - module: cql
          args: -Pcassandra3-byteordered -Dtest.skip.tp=false -DskipTests=true
          java: 8
        - module: cql
          args: -Pcassandra3-murmur -Dtest.skip.tp=false -DskipTests=true
          java: 8
        - module: hbase
          args: -Dtest.skip.tp=false -DskipTests=true
          java: 8
        - module: inmemory
          install-args: -Pjava-11
          args: -Dtest.skip.tp=false -DskipTests=true
          java: 11
        - module: berkeleyje
          install-args: -Pjava-11
          args: -Dtest.skip.tp=false -DskipTests=true
          java: 11
        - module: cql
          install-args: -Pjava-11
          args: -Pcassandra3-byteordered -Dtest.skip.tp=false -DskipTests=true
          java: 11
        - module: cql
          install-args: -Pjava-11
          args: -Pcassandra3-murmur -Dtest.skip.tp=false -DskipTests=true
          java: 11
        - module: cql
          install-args: -Pjava-11
          args: -Pcassandra4-byteordered -Dtest.skip.tp=false -DskipTests=true
          java: 11
        - module: cql
          install-args: -Pjava-11
          args: -Pcassandra4-murmur -Dtest.skip.tp=false -DskipTests=true
          java: 11
        - module: hbase
          install-args: -Pjava-11
          args: -Dtest.skip.tp=false -DskipTests=true
          java: 11
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-tp-tests ().csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/janusgraph/janusgraph', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - uses: actions/checkout@v4
    - run: touch optcd-3.txt
    - uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |-
          ${{ runner.os }}-maven-
    - run: touch optcd-4.txt
    - uses: actions/setup-java@v4
      with:
        java-version: 8.0.382+5
        distribution: zulu
    - run: touch optcd-5.txt
    - uses: actions/setup-java@v4
      with:
        java-version: 11.0.20+1
        distribution: zulu
    - run: touch optcd-6.txt
    - run: mvn clean install --projects janusgraph-${{ matrix.module }} ${{ env.BUILD_MAVEN_OPTS
        }} ${{ matrix.install-args }}
    - run: touch optcd-7.txt
    - run: mvn verify --projects janusgraph-${{ matrix.module }} ${{ matrix.install-args
        }} ${{ matrix.args }}
    - run: touch optcd-8.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-tp-tests ()
        path: /home/runner/inotifywait-log-tp-tests ().csv
    name: tp-tests ()
'on':
- push
- workflow_dispatch
